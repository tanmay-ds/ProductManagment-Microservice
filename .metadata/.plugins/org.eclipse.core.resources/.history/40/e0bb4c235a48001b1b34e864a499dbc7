package com.productmanagment.product.security.jwt;

import java.util.Collection;
import java.util.Date;
import java.util.function.Function;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import com.productmanagment.product.security.CustomUserDetail;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;

@Component
public class JwtUtil {

	
	private String secretKey = "titan";

	public Authentication getAuthentication(String token) {
		CustomUserDetail customUserDetail = new CustomUserDetail(extractUsername(token), extractEmail(token),
				extractAuthorities(token));
		return new UsernamePasswordAuthenticationToken(customUserDetail, token, extractAuthorities(token));

	}

	private Collection<? extends GrantedAuthority> extractAuthorities(String token) {
		return (Collection<? extends GrantedAuthority>) extractAllClaims(token).get("roles");
	}

	public String extractEmail(String token) {
		return String.valueOf(extractAllClaims(token).get("email"));
	}

	public String extractUsername(String token) {
		return extractClaim(token, Claims::getSubject);
	}

	public Date extractExpiration(String token) {
		return extractClaim(token, Claims::getExpiration);
	}

	private <T> T extractClaim(String token, Function<Claims, T> claimResolver) {
		final Claims claims = extractAllClaims(token);
		return claimResolver.apply(claims);
	}

	private Claims extractAllClaims(String token) {
		return Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token).getBody();

	}

	public Boolean validateToken(String token, UserDetails userDetails) {
		final String username = extractUsername(token);
		return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
	}

	private Boolean isTokenExpired(String token) {
		return extractExpiration(token).before(new Date());
	}

}